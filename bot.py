from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask
import threading
import os

# Callback data constants
MENU, STOCK, COMMANDE, NATURE, RHUM_VANILLE = range(5)

# Chemin vers l'image locale
IMAGE_PATH = "photo_2024-03-18_10-30-32.jpg"  # Remplacez par le chemin exact de votre image

# Flask app pour l'√©coute sur un port
app = Flask(__name__)

@app.route("/")
def home():
    return "Le bot Telegram est actif."

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Afficher le menu principal avec une image."""
    keyboard = [
        [InlineKeyboardButton("üì¶ùêíùêìùêéùêÇùêäüì¶", callback_data=str(STOCK))],
        [InlineKeyboardButton("üîåùêÇùêéùêåùêåùêÄùêçùêÉùêÑüîå", callback_data=str(COMMANDE))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_photo(
            photo=open(IMAGE_PATH, 'rb'),
            reply_markup=reply_markup
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_caption(
            reply_markup=reply_markup
        )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√©rer les choix dans le menu principal."""
    query = update.callback_query
    await query.answer()
    choice = int(query.data)
    
    if choice == STOCK:
        keyboard = [
            [InlineKeyboardButton("ü™µùêçùêÄùêìùêîùêëùêÑü™µ", callback_data=str(NATURE))],
            [InlineKeyboardButton("üçπùêëùêáùêîùêå ùêïùêÄùêçùêàùêãùêãùêÑüçπ", callback_data=str(RHUM_VANILLE))],
            [InlineKeyboardButton("üîôùêëùêÑùêìùêéùêîùêëüîô", callback_data=str(MENU))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(
            reply_markup=reply_markup
        )
    elif choice == COMMANDE:
        keyboard = [[InlineKeyboardButton("üîôùêëùêÑùêìùêéùêîùêëüîô", callback_data=str(MENU))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(
            caption="üìçùêåùêÑùêÑùêì-ùêîùêè :üìç\n\n   üè¢DEUIL LA BARRE 95170 \n\n   üóºPARIS A PARTIR DE 50‚Ç¨ \n\nùêÇùêéùêçùêìùêÄùêÇùêìùêÑùêô : @numba1seller",
            reply_markup=reply_markup
        )

async def stock(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√©rer les sous-menus de STOCK."""
    query = update.callback_query
    await query.answer()
    choice = int(query.data)
    
    if choice == NATURE:
        keyboard = [
            [InlineKeyboardButton("üîåùêÇùêéùêåùêåùêÄùêçùêÉùêÑüîå", callback_data=str(COMMANDE))],
            [InlineKeyboardButton("üîôùêëùêÑùêìùêéùêîùêëüîô", callback_data=str(STOCK))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(
            caption="ü™µùêñùêéùêéùêÉ ùêçùêÄùêìùêîùêëùêÑ‚Å£ :ü™µ\n   1 - 10‚Ç¨\n   3 - 25‚Ç¨\n   5 - 40‚Ç¨ ",
            reply_markup=reply_markup
        )
    elif choice == RHUM_VANILLE:
        keyboard = [
            [InlineKeyboardButton("üîåùêÇùêéùêåùêåùêÄùêçùêÉùêÑüîå", callback_data=str(COMMANDE))],
            [InlineKeyboardButton("üîôùêëùêÑùêìùêéùêîùêëüîô", callback_data=str(STOCK))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(
            caption="üçπùêëùêáùêîùêå ùêïùêÄùêçùêàùêãùêãùêÑ :üçπ\n   1 - 15‚Ç¨\n   3 - 40‚Ç¨\n   5 - 60‚Ç¨",
            reply_markup=reply_markup
        )
    elif choice == STOCK:
        keyboard = [
            [InlineKeyboardButton("ü™µùêçùêÄùêìùêîùêëùêÑü™µ", callback_data=str(NATURE))],
            [InlineKeyboardButton("üçπùêëùêáùêîùêå ùêïùêÄùêçùêàùêãùêãùêÑüçπ", callback_data=str(RHUM_VANILLE))],
            [InlineKeyboardButton("üîôùêëùêÑùêìùêéùêîùêëüîô", callback_data=str(MENU))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(
            reply_markup=reply_markup
        )

async def commande(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√©rer la commande et retourner au menu."""
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("üîôùêëùêÑùêìùêéùêîùêëüîô", callback_data=str(MENU))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="COMMANDE :\nVotre commande a √©t√© enregistr√©e. Cliquez sur 'RETOUR' pour revenir au menu principal.",
        reply_markup=reply_markup
    )

def main() -> None:
    """Lancer le bot."""
    # Lancer le serveur Flask dans un thread s√©par√©
    threading.Thread(target=run_flask).start()

    # Lancer le bot Telegram
    application = Application.builder().token("7838117716:AAEMgHVZUuzxiwnliaN2Z5N1KicrldYrqro").build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(menu, pattern=f"^{STOCK}$|^{COMMANDE}$"))
    application.add_handler(CallbackQueryHandler(stock, pattern=f"^{NATURE}$|^{RHUM_VANILLE}$|^{STOCK}$"))
    application.add_handler(CallbackQueryHandler(commande, pattern=f"^{COMMANDE}$"))
    application.add_handler(CallbackQueryHandler(start, pattern=f"^{MENU}$"))
    application.run_polling()

if __name__ == '__main__':
    main()
